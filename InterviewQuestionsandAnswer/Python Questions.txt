1 what is time complexity ?


In computer science, the time complexity is the computational complexity that describes the amount of computer time it takes to run an algorithm. 
Time complexity is commonly estimated by counting the number of elementary operations performed by the algorithm, supposing that each elementary operation takes a fixed amount of time to perform. 
Thus, the amount of time taken and the number of elementary operations performed by the algorithm are taken to differ by at most a constant factor.


worst case complexity - maximum number of computer time it takes to run an algorithm

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

2 when to use set and when to use list?


list - when you want to have ordered collection we use list and duplicate values , non hashable elements

set - when you are not woried  about order or duplicate element .When speed and performance matters most use set . Set requires has able element

dict - Do you need to associate values with keys, so you can look them up efficiently (by key) later on? Use a dictionary.
--------------------------------------------------------------------------------------------------------------------------------------------------------------

Hashing:
https://runestone.academy/runestone/books/published/pythonds/SortSearch/Hashing.html
https://en.wikipedia.org/wiki/Hash_function
https://stackoverflow.com/questions/14535730/what-does-hashable-mean-in-python

Things to know,

1 hash table

2 hashable object

3 hash function

4 collision

5 avoding collison

6 hash value

7 __hash__()

8 hash()

9 immutable objects are hash able
------------------------------------------------------------------------------------------------------------------------
3 when to use keyword argumnets in functions?

when you are not worrried about positions in a function we can used keyword arguments . Only key has to be proper

1 positional argument

2 variable length

3 default value

4 keyword argument

--------------------------------------------------------------------------------------------------------------------------------
4 When we will use generator object ?

http://thepythoncorner.com/dev/generators-in-python-should-i-use-them/

Generators in Python are just another way of creating iterable objects and are usually used when you need to create iterable object quickly, without the need of creating a class and adopting the iteration protocol. 
To create a generator you just need to define a function and then use the yield keyword instead of return. values are generated in lazy way .Please note that once we have consumed the generator, 
we can’t use it anymore because generators in Python can’t be rewound.

1 Do I need all the items of the returned list?
2 Memory issues?
3 just to display the data
4 when you want to search output of function against values
5 for faster execution

-------------------------------------------------------------------------------------------------------------------------------------
5 what are data class?

Among the new features of Python 3.7, a new one is the decorator @dataclass that simplify the creation of data classes by auto-generating special methods such as __init__() and __repr__().

Mainly to store state of data

A data class is a class whose main purpose is to store data without functionality. This kind of class, also known as data structure, is very common. For example, a class used to store the coordinates of a point is simply a class with 3 fields (x, y, z).

However, we often need to add a constructor, a representation method, a comparison function, etc. These functions are cumbersome, and this is precisely what should be handled transparently by the language.


Data classes are available for Python 3.7 or above. You can use data classes as a data container but not only. 
Data classes also write boiler-plate code for you and simplify the process of creating classes because it comes with some methods implemented for free

The @dataclass decorator accepts a list of parameters to control which methods should be generated:



init: if True, generates the __init__ method.
repr: if True, generates the __repr__ method.
eq: if True, generates the __eq__ method by comparing the fields as they were tuples.
order: if True, generates the __lt__, __le__, __gt__, and __ge__ methods.
unsafe_hash: if False, generates the __hash__ method depending on the values of eq and frozen. If True, the __hash__ function will be generated.
frozen: if True, then the instances will be immutable (read-only).


link : https://towardsdatascience.com/data-classes-in-python-8d1a09c1294b

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6 what is ducktyping?

polymorphisum

x = 2 
x = 'test'

same function or variable that acts differently according to the input
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7 what is tuple un packing ?

extracting the values from a tuple

Ex a = (1,2,3)
(a1,a2,a3) = a
print(a1)
----------------------------------------------------------------------------------------------------------------------------
8 In dict how can we avoid key error ?

using get method, get method retruns none , also can specify default value 
 d = {'a' : 2 , 'b' : 3 }
 d.get('c',3)
-------------------------------------------------------------------------------------------------------------------------------
9 what are decorators ?

Decorators are very powerful and useful tool in Python since it allows programmers to modify the behavior of function or class.
Decorators allow us to wrap another function in order to extend the behavior of the wrapped function, 
without permanently modifying it. But before diving deep into decorators let us understand some concepts that will come in handy in learning the decorators.

--------------------------------------------------------------------------------------------------------------------------------------------------------
10 What is virtual environment ?

Problem:
By default all the external packages are defined in one common location.
Consider the following scenario where you have two projects: ProjectA and ProjectB, both of which have a dependency on the same library,
both project requires different versions of same module.This is a real problem for Python since it can’t differentiate between versions in the site-packages directory.
So both v1.0.0 and v2.0.0 would reside in the same directory with the same name.

Defination:
At its core, the main purpose of Python virtual environments is to create an isolated environment for Python projects. 
This means that each project can have its own dependencies, regardless of what dependencies every other project has.

Install:
pip install virtualenv or venv(python 3)

Command:
python3 -m venv env  - To create virtual env
source env/bin/activate - To activate
(./activate)




├── bin
│   ├── activate
│   ├── activate.csh
│   ├── activate.fish
│   ├── easy_install
│   ├── easy_install-3.5
│   ├── pip
│   ├── pip3
│   ├── pip3.5
│   ├── python -> python3.5
│   ├── python3 -> python3.5
│   └── python3.5 -> /Library/Frameworks/Python.framework/Versions/3.5/bin/python3.5
├── include
├── lib
│   └── python3.5
│       └── site-packages
└── pyvenv.cfg

bin: files that interact with the virtual environment
include: C headers that compile the Python packages
lib: a copy of the Python version along with a site-packages folder where each dependency is installed

More interesting are the activate scripts in the bin directory. These scripts are used to set up your shell to use the environment’s Python executable and its site-packages by default.

In order to use this environment’s packages/resources in isolation, you need to “activate” it. To do this, just run the following:
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
https://trstringer.com/logging-flask-gunicorn-the-manageable-way/  - Gunicorn logging
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11 What is workes in gunicorn ? is dependent on hardware?

link : https://docs.gunicorn.org/en/stable/design.html

Worker process is responsible for handling the request .It is directly dependent on hardware, if we increase the core , we can increase the worker process as well .
Ideal scenario 2*core + 1

Different types of worker

1 sync worker - one request at a time

2 async worker



using GUNICORN_CMD_ARGS to specify the configuration:

 GUNICORN_CMD_ARGS="--bind=127.0.0.1 --workers=3" gunicorn app:app

Settings in Gunicorn

1 config(-c , --config) - defaultname guincon.conf.py
2 WSGI_APP($MODULE_NAME:$VARIABLE_NAME)
3 reload(--reload)
4 reload_engine
5 reload_extra_files
6 loglevel
7 accesslog
8 errorlog
9 access_log_format
10 bind
11 workers
12 worker_class
13 threadsss

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

12 what is microservice architecture?
https://medium.com/hashmapinc/the-what-whassss-and-how-of-a-microservices-architecture-4179579423a9#id_token=eyJhbGciOiJSUzI1NiIsImtpZCI6IjE5ZmUyYTdiNjc5NTIzOTYwNmNhMGE3NTA3OTRhN2JkOWZkOTU5NjEiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJuYmYiOjE2MjQxNzEyMDMsImF1ZCI6IjIxNjI5NjAzNTgzNC1rMWs2cWUwNjBzMnRwMmEyamFtNGxqZGNtczAwc3R0Zy5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjExNzM4MzY2MjA2MDgwODk3MzU4OSIsImVtYWlsIjoicGF2YW5rcmlzaG5hMTk5NUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXpwIjoiMjE2Mjk2MDM1ODM0LWsxazZxZTA2MHMydHAyYTJqYW00bGpkY21zMDBzdHRnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwibmFtZSI6IlBhdmFuIEtyaXNobmEiLCJwaWN0dXJlIjoiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2h0NGh4dWIxc2tDN0ZBcWVlTDhOOXlOSDdHV2FmOWFwVkJaWXR3VXc9czk2LWMiLCJnaXZlbl9uYW1lIjoiUGF2YW4iLCJmYW1pbHlfbmFtZSI6IktyaXNobmEiLCJpYXQiOjE2MjQxNzE1MDMsImV4cCI6MTYyNDE3NTEwMywianRpIjoiYzFjMDg5MzhmMmNiYmUyYzliZTE5MTAxN2FjNTIzMTE2NzNlNTFlOCJ9.qxXMNzBRIYL0ujeiMstSIvd8afVgWFM6-WmJL3OC2KraHEILoevTOR5rId3LMa5EoHnu99zklkVT4PJf8HpR_nponTLxuHkt4HivXhikS2qnobjo94WKQTQzCM2nPNE24SxWneAYqDSKGzmGOdACIlzaaLWeuHztb2XFRraVmrhF_2BGIrqdFeo9ETkPo0AfkvUHjSs1-pyTHBtIti1aLL2_MyqobuvHInIXAPODF78EUzmXB4CnkQBZo2N0MmzWXFV4CZ8BNIKNzt2LvujZnguRIPZEni3C79d-fIq2ox20m1AxXbUJW48Nd6kENy3OKMklbLcwh1A1RWFOxI2JkA

https://www.bmc.com/blogs/microservices-architecture/#


Its loosely coupled services which can be developed, deployed, and maintained independently. 
Each of these services is responsible for discrete task and can communicate with other services through simple APIs to solve a larger complex business problem.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13 Difference between multithreading vs multiprocessing ?

1  It’s better to use multi-threading for tasks that involve large I/O operations (to avoid idle)
2  it’s better to use multi-processing for tasks involving Huge computations of the CPU
3 can't share data in multi-processing
4 can share data in multithreading

https://towardsdatascience.com/python-multi-threading-vs-multi-processing-1e2561eb8a24

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14 what is Global Interpreter lock ?
https://www.guru99.com/python-multithreading-gil-example.html

1 gil 
2 lock
3 race condition
4 shared resource
5 reference counting
--------------------------------------------------------------------------------------------------------------------------------------------

15  Memory management in python?

https://www.geeksforgeeks.org/memory-management-in-python/

1 reference counting
2 python memmory manager
3 stack memory - function
4 heap memory - 
5 Python does automatic grabage collections
--------------------------------------------------------------------------------------------------------------------------------------------
16 what is pickling and un pickling ?

https://www.codesansar.com/python-programming/what-is-pickling-and-unpickling.htm

-----------------------------------------------------------------------------------------------------------------------------------------
17 Why static method ?

https://stackoverflow.com/questions/2438473/what-is-the-advantage-of-using-static-methods-in-python/2438627

------------------------------------------------------------------------------------------------------------------------------------------------

18 what is the use of __init__.py?

https://stackoverflow.com/questions/448271/what-is-init-py-for
-----------------------------------------------------------------------------------------------------------------------------------------------
19 what all types can be used as keys in python dict?

All immutable types can be used as keys in dict including boolean

-----------------------------------------------------------------------------------------------------------------------------------------------
20 When does Value error,Name Error, Syntax Error, Index Error occur ?

https://cs.carleton.edu/cs_comps/1213/pylearn/final_results/encyclopedia/valueError.html

Value Error - invalid type casting (ex: int('s')), removing an element from list when the element does not exist.
Name Error - name is not defined 
Syntax Error - Invalid Syntax
Index Error - Index out of range (ex: a=[];print(a[1]))
--------------------------------------------------------------------------------------------------------------------------------------------------
21 Name two default method in unit testing ?
1 setup 
2 teardown
--------------------------------------------------------------------------------------------------------------------------------------------------
22 Does No SQl uses indexing ?
All SQL uses indexing for better performance and accessing of the data
---------------------------------------------------------------------------------------------------------------------------------------------------
23 When to use sql vs nosql?
--------------------------------------------------------------------------------------------
24 Python debugger module?
https://www.geeksforgeeks.org/python-debugger-python-pdb/
---------------------------------------------------------------------------------------------
25 Http head method ? does it return value ?
https://reqbin.com/Article/HttpHead
To get header information for a get method and only header information returned ,no data
-----------------------------------------------------------------------------------------------
26 What is git stash? and when it will delete?
https://stackoverflow.com/questions/5737002/how-to-delete-a-stash-created-with-git-stash-create

https://git-scm.com/docs/git-stash
---------------------------------------------------------------------------------------------------

27 What is release sprint ?
https://scrumdictionary.com/term/release-sprint/#:~:text=The%20Release%20Sprint%20is%20when,no%20additional%20new%20feature%20development
-------------------------------------------------------------------------------------------------------------------------------------

28 What all lost while migrating from sql to nosql ?

https://www.quora.com/What-will-be-the-challenge-to-migrate-data-from-NoSQL-to-SQL-database-and-vice-versa

1 relationship
2 structure
-----------------------------------------------------------------------------------------------------------------------------------------------

29 Default http method in flask?

get
-------------------------------------------------------------------------------------------------------------------------------------------------
30 what is open api ?

1 documenation for publically available api

2 YAML or JSON format
https://stoplight.io/openapi/#what-are-the-benefits-of-openapi%3F
-----------------------------------------------------------------------------------------------------------------------------------------------
31 Python Flask Caching?
https://flask-caching.readthedocs.io/en/latest/
------------------------------------------------------------------------------------------------------------------------------------------------
32 Jenkins uses which technology to build pipelines?

Pipelines are Jenkins jobs enabled by the Pipeline (formerly called “workflow”) plugin and built with simple text scripts that use a Pipeline DSL (domain-specific language) based on the Groovy programming language.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

33 Flask mail
https://www.tutorialspoint.com/flask/flask_mail.htm
--------------------------------------------------------------------------------------------------------------------------------------
34 401 vs 403 ?

401 - unauthorized access
403 - valid user but dont have proper permission
-----------------------------------------------------------------------------------------------------------------------------------------

35 can we update list which is inside tuple ?
Yes

--------------------------------------------------------------------------------------------------------------------------------
36 What is cors?
https://www.educative.io/blog/getting-started-cors

browser mechanisum
-----------------------------------------------------------------------------------------------------------------------------
37 Does python support double pointer?
No
--------------------------------------------------------------------------------------------------------------------------------
38 What is MRO?
http://www.srikanthtechnologies.com/blog/python/mro.aspx
---------------------------------------------------------------------------------------------------------------------------------
39 What is monkey patching in python ?
At runtime changing the attribute of a class 
------------------------------------------------------------------------------------------------------------------------------------
40 Second highest Salaray in SQL?
https://stackoverflow.com/questions/7417415/how-to-get-second-highest-salary-employees-in-a-table/11872509
---------------------------------------------------------------------------------------------------------------------------------

1 implement singleton class in python
2 __new__ vs __init__
	https://dev.to/pila/constructors-in-python-init-vs-new-2f9j#:~:text=__new__%20is%20the,instance%20after%20it's%20been%20created.
3 Rest parameter in Angular
4 local storage vs session storage - how to clear local storage
	https://stackoverflow.com/questions/8537112/when-is-localstorage-cleared
5 get vs filter in Django
6 raw sql vs orm 
7 serialisation
8 angular interceptor
9 binary tree, binary search
10 middle where
11 ‘2’ to int without int method
13 sql partitioning
14 in vs where in sql
15 Angular observer
16 Auth guards
17 how indexing works 
18 primary key vs unique key
19 access token vs refresh token
20 closure
21 hoisting
22 distributed cache
23 connect to database without using username and password.
24 best method  to sort a laregest data
25 python sorting function with key argument
26 merge sort
27 reduce function in python
28 virtual dom
29 react vs angular
30 how to optimize ui performance
31 scale an application
32 sso implementation, authentication implmentation
33 what are callables?
34 how to pass arguments to decorator
35 closure in python
36 blueprints
37 call backof hell
38 promises
39 iffo in javsacript
40 templates based deployment
41 what are mutual tls
42 oneway binding vs two way binding
43 stateful pods vs stateless pods
44 css for centorying forms
45 positions in css
46 how to pass data in angular
47 effectively pass db object in flask
48 session storage vs local storage vs cookies
49 Design gmail architecture
50 decorator vs closure in python
51 deep copy vs shallow copy for list within list
52 how to handle session for large users
53 triggram matching technique
54 tougest problem faced in python programming
55 google search kind of application to search documents from datasource
56 How to optimize complex store procdeures
57 system design facebook post
58 Adavantages of having multiple container in single pods
59 how to decouple database from application server
60 implemnt your own custom promises
61 google docs system design
62 In microservice how can we verify that of one of the componet is down without waiting for timeout error.
63 javascript what is optional chaining(?.)
64 built in generators in python
65 put vs patch methods
66 what are differnet design patterns you have worked
67 javascript event loop promise and setTimeout which will execute first
68  what is pwa ? what is service wroker?
69 React life cycle methods
70 React hooks related to performance
71 How redux works 


